import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.text.*;
import java.util.Hashtable;


parser code {:
    private static final boolean DEBUG = true;
    public static int error = 0;
    public static FileWriter fileout;
	public static int code = 0;
	public static int date = 0;
	
	public Hashtable<String,Double> symTable;

    @Override
    public void report_error(String message, Object info) {
        error++;
        System.err.print(Main.file_name+":");
        if (info instanceof Symbol) {
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(line+":"+column+":");
            }
        }
        System.err.print(red(" error: "));
        System.err.println(message);
    }

    private String red(String str) {
        return "\u001B[31m" + str + "\u001B[0m";
    }

    @Override
    public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    public Object getToken(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }

    public void report(String message) {
        report_error(message, getToken());
    }
    public void debug(String message) {
        if (DEBUG)
            System.out.println(red("DEBUG: ")+message);
    }
    public void output(String message){
        try {
            fileout.write(message);
        } catch(IOException e) {
            e.printStackTrace();
        }
        System.out.print(message);
    }
:};

init with {:
	symTable=new Hashtable<String,Double>();
    try{
        fileout = new FileWriter(new File("output.pasm"));
    } catch(IOException e){
        System.err.println(e);
    }
:};


///////////////////////////////////
// 	List of terminal symbols	 //
///////////////////////////////////
terminal TOKEN, ALPHA_WORD, MIN;
terminal String TIME_SHORT, TIME_LONG, CODE;
terminal AUCTION, EURO, QUOTE, ARROW, S, C, DOT, COMMA;
terminal Double VALUE;
terminal String USER;
terminal Integer INTEGER;
///////////////////////////////////
//  List of non terminal symbols //
///////////////////////////////////
non terminal ok, prog;
non terminal header, header_list, header_item, hour, code_item;
non terminal currencies, curr_list, curr_item;
non terminal Double user_list;
non terminal Object[] user_item, adv_item, adv_list;
non terminal auctions, auc_list, auc_item;

///////////////////////////////////
//	List of precedence			 //
///////////////////////////////////
///////////////////////////////////
// 	Start the grammar			 //
///////////////////////////////////
start with ok;

ok			::= prog 
				{:	if (parser.error > 0) {
						System.out.println(parser.error+" errors generated"); 
					} else {
						System.out.println("The program is correct");
					}
					parser.fileout.close();
				:};

prog		::= header TOKEN currencies TOKEN auctions;

header		::= header_list
				{:	if (parser.code != 2) {
						parser.report("the code token must appear exactly 2 times");
					}
					if (parser.date	<= 0) {
						parser.report("the code token must appear al least 1 time");
					}
				:};
header_list	::= header_list header_item | header_item;
header_item ::= code_item S| hour S; // TODO validate the code and the hour
code_item	::= CODE:x
				{:	x = x.replaceAll("Y","");
					x = x.replaceAll("X","");
					Integer i = Integer.parseInt(x);
					boolean valid = true;
					if (i< -138 || i > 824 || (i % 2)!=0 )
						valid = false;
					if (valid == false)
						parser.report("the suffix of the code is invalid");
					parser.code++;
				:};
				
hour		::= TIME_SHORT:x
				{:	SimpleDateFormat format = new SimpleDateFormat("hh:mm");
					boolean valid = true;
					Date date = format.parse(x);
					Date min = format.parse("08:31");
					Date max = format.parse("23:21");
					if ((min.getTime() - date.getTime()) > 0)
						valid = false;
					if ((date.getTime() - max.getTime()) > 0)
						valid = false;
					if (valid == false)
						parser.report("the date is invalid");
					parser.date++;
				:}
			| 	TIME_LONG:x
				{:	SimpleDateFormat format = new SimpleDateFormat("hh:mm:ss");
					boolean valid = true;
					Date date = format.parse(x);
					Date min = format.parse("08:31:12");
					Date max = format.parse("23:21:10");
					if ((min.getTime() - date.getTime()) > 0)
						valid = false;
					if ((date.getTime() - max.getTime()) > 0)
						valid = false;
					if (valid == false)
						parser.report("the date is invalid");
					parser.date++;
				:};

currencies	::= curr_list;
curr_list	::= curr_list curr_item | curr_item curr_item curr_item;
curr_item	::= VALUE ALPHA_WORD ALPHA_WORD C user_list S;
user_list	::= user_list:x COMMA user_item:y
				{:	parser.symTable.put((String)y[0],
										x*((Double)y[1]));
					RESULT=x;
				:}
			| 	user_item:x
				{:	parser.symTable.put((String)x[0],
						((Double)x[1])*(Double)parser.getToken(-4));
					RESULT=(Double)parser.getToken(-4);
				:}
			| 	/* empty */;
user_item	::= USER:x VALUE:y
				{:	RESULT=new Object[2];
					RESULT[0]=x;
					RESULT[1]=y;
				:};

auctions	::= auc_list | /*empty*/;
auc_list	::= auc_list auc_item auc_item | auc_item auc_item;
auc_item	::= AUCTION INTEGER:x {:parser.output("Auction "+x+":\n");:}
				C QUOTE QUOTE C INTEGER MIN ARROW
				adv_list:y S
				{:	
					parser.output("Winner is "+y[2]+" price "+y[1]+" euro\n");
				:};
adv_list	::= adv_list:y COMMA adv_item:x
				{:	RESULT=y; // Set the inh value
					Double actValue = parser.symTable.get((String)x[0]);
					parser.output("  "+x[0]+": ");
					if (((Double)x[2]) < (Double)RESULT[1]) {
						parser.output("Error, advance less than the current auction value\n");
					} else if ((Double)x[1] > (Double)RESULT[0]) {
						parser.output("Error, advance out of time\n");
					} else if ((Double)x[2] > actValue) {
						parser.output("Error, available only "+actValue+" euro\n");
					} else {
						parser.output("New auction price "+x[2]+" euro\n");
						RESULT[1] = x[2];
						RESULT[2] = x[0];
						parser.symTable.put((String)x[0],actValue-(Double)x[2]);
					}
				:}
			|	adv_item:x
				{:	RESULT=new Object[3];
					RESULT[0] = new Double((Integer)parser.getToken(-3)); // Set the inh value
					RESULT[1] = new Double(0.0); // This is the start adv value
					RESULT[2] = "";
					// This part should be equal here and in the list concatenation
					Double actValue = parser.symTable.get((String)x[0]);
					parser.output("  "+x[0]+": ");
					if (((Double)x[2]) < (Double)RESULT[1]) {
						parser.output("Error, advance less than the current auction value\n");
					} else if ((Double)x[1] > (Double)RESULT[0]) {
						parser.output("Error, advance out of time\n");
					} else if ((Double)x[2] > actValue) {
						parser.output("Error, available only "+actValue+" euro\n");
					} else {
						parser.output("New auction price "+x[2]+" euro\n");
						RESULT[1] = x[2];
						RESULT[2] = x[0];
						parser.symTable.put((String)x[0],actValue-(Double)x[2]);
					}
				:};

adv_item	::= USER:x C INTEGER:y C VALUE:z EURO
				{:	RESULT=new Object[3];
					RESULT[0]=x;
					RESULT[1]=new Double(y);
					RESULT[2]=z;
				:};
