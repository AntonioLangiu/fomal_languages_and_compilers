import java_cup.runtime.*;
import java.io.*;


parser code {:
    public static int error = 0;
    
    // Redefinition of error functions
    @Override
    public void report_error(String message, Object info) {
        error++;
        System.err.print(Main.file_name+":");
        if (info instanceof Symbol) {
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(line+":"+column+":");
            }
        }
        System.err.print(red(" error: "));
        System.err.println(message);
    }
    
    private String red(String str) {
        return "\u001B[31m" + str + "\u001B[0m";
    }
    
    @Override
    public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    public void report(String message) {
        report_error(message, getToken());
    }
:};

// Terminal tokens
terminal INT, DOUBLE, CHAR, FLOAT, STRING;
terminal INT_TYPE, DOUBLE_TYPE, CHAR_TYPE, FLOAT_TYPE;
terminal SIGNED, UNSIGNED, REGISTER, LONG, SHORT, EXTERN, STATIC;
terminal RO, RC, SO, SC, BO, BC, PLUS, MOD, MINUS, STAR, DIV, UMINUS;
terminal EQPLUS, EQMINUS, PLUSPLUS, MINUSMINUS;
terminal EQ, GT, LT, GE, LE, AND, OR, NOT, S, C, COMMA, BREAK, CONTINUE;
terminal WHILE, DO, FOR, IF, ELSE, SWITCH, CASE, DEFAULT, RETURN;
terminal TOKEN, PRINT;
// Non terminal tokens
non terminal prog, cmpt_list, cmpt_item, declaration, decl_list_i, item, value;
non terminal function, arguments, arg_list, arg_item, string_list;
non terminal type, type_t, mod_item, mem_mod, sign_mod, len_mod, star_list;
non terminal name, id, content;
non terminal decl_list, stmt_list, stmt_item;
non terminal assignment, exp;
non terminal cicle, while, do_while, for;
non terminal condition, if, if_item, switch, case_list, case_item;
non terminal func_call, exp_list, return;
// Precedence of operators
precedence left ELSE;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left LE, LT, GE, GT, EQ;
precedence left PLUS, MINUS;
precedence left STAR, DIV;
precedence left PLUSPLUS, MINUSMINUS;
precedence left UMINUS;

// Grammar start

start with prog;

prog        ::= cmpt_list   {: 
                                if (parser.error > 0) {
                                    System.out.println(parser.error+" errors generated");
                                    return null;
                                }
                                System.out.println("The program is correct"); 
                            :}; 
cmpt_list   ::= cmpt_list cmpt_item | cmpt_item;
cmpt_item   ::= function | declaration;

declaration ::= type decl_list_i S
            |   error decl_list_i S
                {:parser.report("the declaration type is not correct"); :};
decl_list_i ::= decl_list_i COMMA item
            |   item
            |   decl_list_i error item
                {:parser.report("expected \",\" first declaration"); :}
            |   error
                {:parser.report("expected \";\" after declaration"); :};

item        ::= id
            |   id EQ value
			|   id EQ BO string_list BC
            |   id EQ error
                {:parser.report("error in the vector bracket"); :};
string_list	::= string_list COMMA STRING | STRING;
value       ::= INT| DOUBLE| CHAR| FLOAT | STRING;

function    ::= type name arguments BO content BC
            |   type name arguments S;

arguments   ::= RO arg_list RC | RO RC;
arg_list    ::= arg_list COMMA arg_item | arg_item;
arg_item    ::= type id;

type        ::= mod_item type_t star_list
            |   mod_item type_t
            |   type_t star_list
            |   type_t
            |   error type_t star_list
                {:parser.report("error in the type modificator"); :};
type_t      ::= INT_TYPE| DOUBLE_TYPE| CHAR_TYPE| FLOAT_TYPE;
mod_item    ::= mem_mod sign_mod len_mod
            |   mem_mod sign_mod | mem_mod len_mod
            |   sign_mod len_mod
            |   mem_mod | sign_mod | len_mod;
mem_mod     ::= REGISTER | EXTERN | STATIC;
sign_mod    ::= SIGNED | UNSIGNED;
len_mod     ::= LONG LONG | SHORT SHORT | LONG | SHORT;
star_list   ::= star_list STAR | STAR;

name        ::= TOKEN;
id          ::= name 
            |   name SO INT SC 
            |   name SO id SC 
            |   name SO SC;
content     ::= decl_list stmt_list | decl_list | stmt_list;

decl_list   ::= decl_list declaration | declaration;
stmt_list   ::= stmt_list stmt_item | stmt_item;
stmt_item   ::= assignment S 
            |   cicle 
            |   condition 
            |   BREAK S
            |   CONTINUE S
            |   return S
            |   assignment error 
                {:parser.report("missing \";\" after the assignment"); :}
            |   BREAK error
                {:parser.report("missing \";\" after break"); :}
            |   CONTINUE error
                {:parser.report("missing \";\" after the continue"); :};


assignment  ::= id EQ exp | id EQPLUS exp | id EQMINUS exp | exp
            |   id EQ error
                {:parser.report("error between the expressions"); :}
            |   error EQ exp
                {:parser.report("error between the expressions"); :};
exp         ::= 
            /*  Logical expressions */
                exp AND exp
            |   exp OR exp
            |   NOT exp
            /*  Comparison expressions */
            |   exp EQ EQ exp
			| 	exp NOT EQ exp
            |   exp LT exp
            |   exp GT exp
            |   exp GE exp
            |   exp LE exp
            /*  Arithmentic expressions */
            |   exp PLUSPLUS
            |   exp MINUSMINUS
            |   PLUSPLUS exp
            |   MINUSMINUS exp
            |   exp PLUS exp
            |   exp MINUS exp
            |   exp STAR exp
            |   exp DIV exp
            |   id
            |   value
            |   func_call
            |   RO exp RC
            |   MINUS value %prec UMINUS;

cicle       ::= while | for| do_while S;
while       ::= WHILE RO exp RC BO stmt_list BC
            |   WHILE RO error RC stmt_list BC
                {: parser.report("error in the while condition"); :}
            |   WHILE error exp RC stmt_list BC
                {: parser.report("missing \"(\" before the while condition"); :}
            |   WHILE RO exp error stmt_list BC
                {: parser.report("missing \")\" after the while condition"); :};
do_while    ::= DO BO stmt_list BC WHILE RO exp RC;
for         ::= FOR RO assignment S exp S assignment RC BO stmt_list BC;

condition   ::= if | switch;
if          ::= IF RO exp RC if_item
            |   IF RO exp RC if_item ELSE if_item
            |   IF RO error RC if_item ELSE if_item
                {: parser.report("error in the if condition"); :}
            |   IF error exp RC if_item ELSE if_item
                {: parser.report("missing \"(\" before the if condition"); :}
            |   IF RO exp error if_item ELSE if_item
                {: parser.report("missing \")\" after the if condition"); :};

if_item     ::= BO stmt_list BC | stmt_item;
switch      ::= SWITCH RO id RC BO case_list BC
            |   SWITCH RO func_call RC BO case_list BC
            |   SWITCH RO id RC BO case_list DEFAULT C stmt_list BC
            |   SWITCH RO func_call RC BO case_list DEFAULT C stmt_list BC ;

case_list   ::= case_list case_item | case_item;
case_item   ::= CASE value C stmt_list;

func_call	::= name RO exp_list RC
            |   name RO RC
            |   PRINT RO exp_list RC
            |   PRINT RO error RC
                {: parser.report("error in the print function"); :};

exp_list	::= exp_list COMMA exp | exp;
return		::= RETURN exp;
