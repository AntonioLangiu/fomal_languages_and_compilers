import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;

parser code {:
    public static int error = 0;
    public HashMap symbolTable;
    private static final boolean DEBUG = false;
    // Redefinition of error functions
    @Override
    public void report_error(String message, Object info) {
        error++;
        System.err.print(Main.file_name+":");
        if (info instanceof Symbol) {
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(line+":"+column+":");
            }
        }
        System.err.print(red(" error: "));
        System.err.println(message);
    }

    private String red(String str) {
        return "\u001B[31m" + str + "\u001B[0m";
    }

    @Override
    public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    public void report(String message) {
        report_error(message, getToken());
    }

	public void debug(String message) {
        if (this.DEBUG)
            System.out.println(red("DEBUG:")+message);
	}
    public void output(String message){
        System.out.println(message);
    }
:};

init with {:
    symbolTable = new HashMap();
:}

// Terminal symbols
terminal String VARIABLE, VECTOR;
terminal Double REAL;
terminal SO, SC, RO, RC, S, P, STAR, DIV, DOT, PLUS, MINUS, EQ, COMMA, QMARK;
terminal UMINUS;
// Non terminal symbols
non terminal ok, stmt_list, stmt_item, assignment;
non terminal String variable_id, vector_id;
non terminal Double scalar, sc_exp;
non terminal Double[] vector, vec_exp;
non terminal expression;
// Precedence of the operators
precedence left MINUS, PLUS;
precedence left DIV, STAR;
precedence left P;
precedence left DOT;
precedence left UMINUS;

// Start with the grammar

start with ok;

ok			::=	stmt_list QMARK	
				{:  parser.debug("program completed");
                    if (parser.error > 0) {
						System.out.println(parser.error+" errors generated");
					} 
				:};

stmt_list	::= stmt_list stmt_item S | stmt_item S;
stmt_item	::= assignment | expression;

assignment	::= variable_id:x EQ sc_exp:y
                {:  parser.debug("creating variable in symbolTable"); 
                    parser.output("assignment: "+y);
                    parser.symbolTable.put(x, y);
                :}
            |   vector_id:x EQ vec_exp:y
                {:  parser.debug("creating vector in symbolTable"); 
                    parser.output("assignment: ["+y[0]+","+y[1]+"]");
                    parser.symbolTable.put(x, y);
                :};

variable_id ::= VARIABLE:x
                {:  parser.debug("variable_id "+x); RESULT=x; :};
vector_id   ::= VECTOR:x
                {:  parser.debug("vector_id "+x); RESULT=x; :};

scalar		::= REAL:x
                {:  RESULT=x; :}
            |   variable_id:x
                {:  parser.debug("retrieve scalar "+x+" from symbol table");
                    RESULT=(Double)parser.symbolTable.get(x); 
                :};

vector      ::= SO scalar:x COMMA scalar:y SC
                {:  RESULT= new Double[2];
                    RESULT[0]=x;
                    RESULT[1]=y;
                :}
            |   vector_id:x
                {:  parser.debug("retrieve vector "+x+" from symbol table");
                    RESULT=(Double[])parser.symbolTable.get(x); 
                :};

expression  ::= sc_exp:x
                {:  parser.output("scalar expression: " +x);:}
            |   vec_exp:x
                {:  parser.output("vector expression: ["+x[0]+","+x[1]+"]"); :};

sc_exp		::= sc_exp:x PLUS sc_exp:y
                {: RESULT=x+y; :}
			|	sc_exp:x MINUS sc_exp:y
                {: RESULT=x-y; :}
			|	sc_exp:x STAR sc_exp:y
                {: RESULT=x*y; :}
			|	sc_exp:x DIV sc_exp:y
                {: RESULT=x/y; :}
			|	sc_exp:x P sc_exp:y
                {: RESULT=Math.pow(x,y); :}
			|   RO sc_exp:x RC
                {: RESULT=x; :}
            |   vec_exp:x DOT vec_exp:y
                {: RESULT=(x[0]*y[0])+(x[1]*y[1]);:}
			|   MINUS sc_exp:x
                {: RESULT=-x; :} %prec UMINUS
            |   scalar:x
                {: RESULT=x; :};

vec_exp     ::= vec_exp:x PLUS vec_exp:y
                {: RESULT=new Double[2]; RESULT[0]=x[0]+y[0]; RESULT[1]=x[1]+y[1]; :}
			|	vec_exp:x MINUS vec_exp:y
                {: RESULT=new Double[2]; RESULT[0]=x[0]-y[0]; RESULT[1]=x[1]-y[1]; :}
			|   RO vec_exp:x RC
                {: RESULT=new Double[2]; RESULT=x; :}
            |   sc_exp:x STAR vec_exp:y  
                {: RESULT=new Double[2]; RESULT[0]=x*y[0]; RESULT[1]=x*y[1]; :}
            |   vec_exp:y STAR sc_exp:x
                {: RESULT=new Double[2]; RESULT[0]=x*y[0]; RESULT[1]=x*y[1]; :}
            |   sc_exp:x DIV vec_exp:y
                {: RESULT=new Double[2]; RESULT[0]=x/y[0]; RESULT[1]=x/y[1]; :}
            |   vec_exp:x DIV sc_exp:y
                {: RESULT=new Double[2]; RESULT[0]=x[0]/y; RESULT[1]=x[1]/y; :}
			|	MINUS vec_exp:x
                {: RESULT=new Double[2]; RESULT[0]=-x[0]; RESULT[1]=-x[1]; :}
            |   vector:x
                {: RESULT=new Double[2]; RESULT=x; :};
