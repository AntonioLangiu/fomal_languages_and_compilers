import java_cup.runtime.*;
import java.io.*;


parser code {:
	private static final boolean DEBUG = true;
    public static int error = 0;
    public static FileWriter fileout;
	public static int label = 0;

	@Override
    public void report_error(String message, Object info) {
        error++;
        System.err.print(Main.file_name+":");
        if (info instanceof Symbol) {
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(line+":"+column+":");
            }
        }
        System.err.print(red(" error: "));
        System.err.println(message);
    }

    private String red(String str) {
        return "\u001B[31m" + str + "\u001B[0m";
    }

	public String genLabel() {
		return "L"+label++;
	}

    @Override
    public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
	public Object getToken(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }

    public void report(String message) {
        report_error(message, getToken());
    }
	public void debug(String message) {
        if (DEBUG)
            System.out.println(red("DEBUG: ")+message);
    }
    public void output(String message){
		try {
        	fileout.write(message);
        } catch(IOException e) {
            e.printStackTrace();
        }
        System.out.print(message);
    }
:};

init with {:
	try{
        fileout = new FileWriter(new File("output.pasm"));
    } catch(IOException e){
        System.err.println(e);
    }
:};

// Terminal tokens
terminal RO, RC, BO, BC, SO, SC;
terminal EQ, PLUS, MINUS, STAR, DIV;
terminal LT, GT, LE, GE;
terminal AND, OR, NOT;
terminal INT_TYPE, DOUBLE_TYPE;
terminal IF, WHILE, PRINT, ELSE;
terminal SCOL, CM;
terminal Integer INT;
terminal Double DOUBLE;
terminal UMINUS;
terminal String ID;

// Non terminal tokens
non terminal prog;
non terminal stmt_list, stmt, if, while, condition;
non terminal String[] while_id, if_id;
non terminal print, ok;
non terminal String assignment, exp, id;
non terminal String type, var_item, var_list, decl_item, decl_list;

// Precedences and associativities
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left LT, GT, LE, GE, EQ;
precedence left PLUS, MINUS;
precedence left STAR, DIV;
precedence left UMINUS;
precedence left IF;


// Start with the grammar

start with ok;

ok          ::= prog
                {:  if (parser.error > 0) {
                        System.out.println(parser.error+" errors generated");
                    } else {
						parser.output("END\n");
                        parser.debug("The program is correct"); 
                    }
					parser.fileout.close();
                :};

prog        ::= decl_list stmt_list 
            |   decl_list
            |   stmt_list;

// Declarations
decl_list   ::= decl_list decl_item | decl_item;

decl_item   ::= type var_list SCOL
            |   error var_list SCOL
                {:  parser.report("invalid type in declaration"); :}
            |   type var_list error
                {:  parser.report("missing \";\" after the declaration"); :};
type        ::= INT_TYPE 
                {: 	RESULT="INT"; :}
            |   DOUBLE_TYPE
                {: 	RESULT="DOUBLE"; :};
var_list    ::= var_list:y CM var_item:x
				{:	parser.output(y+" "+x+"\n"); :}
            |   var_item:x
				{:	parser.output(parser.getToken(-1)+" "+x+"\n");
					RESULT=(String)parser.getToken(-1);
				:};
var_item    ::= ID:x
                {: 	RESULT=x; :}
            |   ID:x SO INT:y SC
                {: 	RESULT=x+"["+y+"]"; :};

// Instructions
stmt_list   ::= stmt_list stmt | stmt;
stmt        ::= if | while | assignment | print 
            |   BO stmt_list BC
            |   BO error BC
                {:  parser.report("error in the statement"); :};


if          ::= if_id:x
				condition 
				{: 	parser.output("GOTOF "+x[1]+"\n"); :}
				stmt
				{:	parser.output(x[1]+": "); :}
            |   IF error stmt
                {:  parser.report("error in the if condition"); :}
            |   IF condition error
                {:  parser.report("error in the if statement"); :}
            |   IF condition stmt ELSE error
                {:  parser.report("error in the else statement"); :};
if_id		::=	IF
				{:	RESULT=new String[2];
					RESULT[0]=parser.genLabel(); /* else */
					RESULT[1]=parser.genLabel(); /* finish */ :};

while       ::= while_id:x 
				condition
				{:	parser.output("GOTOF "+x[1]+"\n"); :}
				stmt
				{:	parser.output("GOTO "+x[0]+"\n"+x[1]+": "); :}
            |   while_id error stmt
                {:  parser.report("error in the while condition"); :};

while_id	::= WHILE
				{:	RESULT=new String[3];
					RESULT[0]=parser.genLabel();
					RESULT[1]=parser.genLabel();
					parser.output(RESULT[0]+": "); :};

assignment  ::= id:x EQ exp:y SCOL
				{:	parser.output("EVAL "+y+"\nASS "+x+"\n"); :}
            |   id SCOL
				{: 	parser.debug("statement with no effect"); :}
            |   error EQ exp SCOL
                {:  parser.report("error in the assignemnt left value"); :}
            |   id EQ exp error
                {:  parser.report("missing \";\" after the assignment"); :};

print       ::= PRINT exp:x SCOL
				{:	parser.output("PRINT "+x); :}; 

condition   ::= RO exp:x RC
				{:	parser.output("EVAL "+x+"\n"); :};

// Expressions
exp         ::=
            /***Logical expressions*****/
            	exp:x AND exp:y 
				{: 	RESULT=(x+y+"& "); :}
            | 	exp:x OR exp:y 
				{: 	RESULT=(x+y+"| "); :}
            | 	NOT exp:x
				{: 	RESULT=(x+"! "); :}
            /***Comparison expressions**/
            | 	exp:x EQ EQ exp:y 
				{: 	RESULT=(x+y+"== "); :}
            | 	exp:x LT exp:y
				{: 	RESULT=(x+y+"< "); :}
            | 	exp:x GT exp:y
				{: 	RESULT=(x+y+"> "); :}
            | 	exp:x GE exp:y
				{: 	RESULT=(x+y+"=> "); :}
            | 	exp:x LE exp:y
				{: 	RESULT=(x+y+"<= "); :}
            /***Arithmetic expressions**/
            | 	exp:x PLUS exp:y
				{: 	RESULT=(x+y+"+ "); :}
            | 	exp:x MINUS exp:y
				{: 	RESULT=(x+y+"- "); :}
            | 	exp:x STAR exp:y
				{: 	RESULT=(x+y+"* "); :}
            | 	exp:x DIV exp:y
				{: 	RESULT=(x+y+"/ "); :}
            | 	RO exp:x RC
				{: 	RESULT=x; :}
            | 	id:x
				{: 	RESULT=(x+" "); :}
            | 	INT:x
				{: 	RESULT=(x.toString()+" "); :}
            | 	DOUBLE:x
				{: 	RESULT=(x.toString()+" "); :}
            | 	MINUS INT:x
				{: 	RESULT=("-"+x.toString()+" "); :} %prec UMINUS
            | 	MINUS DOUBLE:x
				{: 	RESULT=("-"+x.toString()+" "); :} %prec UMINUS;

id          ::= ID:x
				{:	RESULT=x; :}
			| 	ID:x SO INT:y SC 
				{:	RESULT=x+"["+y+"]"; :}
			| 	ID:x SO ID:y SC
				{:	RESULT=x+"["+y+"]"; :};
