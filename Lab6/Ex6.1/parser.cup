import java_cup.runtime.*;
import java.io.*;


parser code {:
	private static final boolean DEBUG = true;
    public static int error = 0;
    public static FileWriter fileout;

	@Override
    public void report_error(String message, Object info) {
        error++;
        System.err.print(Main.file_name+":");
        if (info instanceof Symbol) {
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(line+":"+column+":");
            }
        }
        System.err.print(red(" error: "));
        System.err.println(message);
    }

    private String red(String str) {
        return "\u001B[31m" + str + "\u001B[0m";
    }

    @Override
    public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    public void report(String message) {
        report_error(message, getToken());
    }
	public void debug(String message) {
        if (DEBUG)
            System.out.println(red("DEBUG: ")+message);
    }
    public void output(String message){
		try {
        	fileout.write(message);
        } catch(IOException e) {
            e.printStackTrace();
        }
        System.out.println(message);
    }
:};

init with {:
	try{
        fileout = new FileWriter(new File("output.pasm"));
    } catch(IOException e){
        System.err.println(e);
    }
:};

// Terminal tokens
terminal RO, RC, BO, BC, SO, SC;
terminal EQ, PLUS, MINUS, STAR, DIV;
terminal LT, GT, LE, GE;
terminal AND, OR, NOT;
terminal INT_TYPE, DOUBLE_TYPE;
terminal IF, WHILE, PRINT, ELSE;
terminal SCOL, CM;
terminal ID, INT, DOUBLE;
terminal UMINUS;

// Non terminal tokens
non terminal prog, decl_list, decl_item, type, var_list, var_item;
non terminal stmt_list, stmt, if, while, condition, exp, id, assignment, print, ok;

// Precedences and associativities
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left LT, GT, LE, GE, EQ;
precedence left PLUS, MINUS;
precedence left STAR, DIV;
precedence left UMINUS;
precedence left IF;


// Start with the grammar

start with ok;

ok          ::= prog
                {:  parser.fileout.close();
                    if (parser.error > 0) {
                        System.out.println(parser.error+" errors generated");
                    } else {
                        parser.debug("The program is correct"); 
                    }
                :};

prog        ::= decl_list stmt_list 
            |   decl_list
            |   stmt_list;

// Declarations
decl_list   ::= decl_list decl_item | decl_item;

decl_item   ::= type var_list SCOL
            |   error var_list SCOL
                {:  parser.report("invalid type in declaration"); :}
            |   type var_list error
                {:  parser.report("missing \";\" after the declaration"); :};
type        ::= INT_TYPE | DOUBLE_TYPE;
var_list    ::= var_list CM var_item | var_item;
var_item    ::= ID | ID SO INT SC;

// Instructions
stmt_list   ::= stmt_list stmt | stmt;
stmt        ::= if | while | assignment | print 
            |   BO stmt_list BC
            |   BO stmt_list error 
                {:  parser.report("missing the close bracket"); :}
            |   BO error BC
                {:  parser.report("error in the statement"); :};


if          ::= IF condition condition stmt
            |   IF error stmt
                {:  parser.report("error in the if condition"); :}
            |   IF condition error
                {:  parser.report("error in the if statement"); :}
            |   IF condition stmt ELSE error
                {:  parser.report("error in the else statement"); :};
                

while       ::= WHILE condition stmt
            |   WHILE error stmt
                {:  parser.report("error in the while condition"); :}
            |   WHILE condition error
                {:  parser.report("error in the while statement"); :};

assignment  ::= id EQ exp SCOL 
            |   id SCOL
            |   error EQ exp SCOL
                {:  parser.report("error in the assignemnt left value"); :}
            |   id EQ error SCOL
                {:  parser.report("error in the assignemnt expression"); :}
            |   id EQ exp error
                {:  parser.report("missing \";\" after the assignment"); :};

print       ::= PRINT id SCOL;

condition   ::= RO exp RC;

// Expressions
exp         ::=
            /* Logical expressions */
            exp AND exp 
            | exp OR exp 
            | NOT exp
            /* Comparison expressions */
            | exp EQ EQ exp 
            | exp LT exp
            | exp GT exp
            | exp GE exp
            | exp LE exp
            /* Arithmetic expressions */
            | exp PLUS exp
            | exp MINUS exp
            | exp STAR exp
            | exp DIV exp
            | RO exp RC
            | id
            | INT
            | DOUBLE
            | MINUS INT %prec UMINUS
            | MINUS DOUBLE %prec UMINUS;

id          ::= ID | ID SO INT SC | ID SO ID SC;
